name: Deploy

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string

permissions:
  id-token: write
  contents: read

env:
  PYTHON_VERSION: 3.11.9
  UV_VERSION: 0.8.0
  AWS_S3_TOFU_BUCKET_NAME: ${{ vars.AWS_S3_TOFU_BUCKET_NAME }}
  AWS_DEPLOYMENT_ACCOUNT_ID: ${{ vars.AWS_DEPLOYMENT_ACCOUNT_ID }}
  AWS_DEPLOYMENT_REGION_NAME: ${{ vars.AWS_DEPLOYMENT_REGION_NAME }}
  AWS_DEPLOYMENT_ROLE_ARN: ${{ vars.AWS_DEPLOYMENT_ROLE_ARN }}
  AWS_ECR_AGENT_REPOSITORY_URI: ${{ vars.AWS_ECR_AGENT_REPOSITORY_URI }}
  TF_VAR_env: ${{ inputs.environment }}
  TF_VAR_region: ${{ vars.AWS_DEPLOYMENT_REGION_NAME }}
  TF_VAR_agent_ecr_repository_account_id: ${{ vars.AWS_ECR_REPOSITORY_ACCOUNT_ID }}
#  TF_VAR_ilert_webhook_url: ${{ secrets.ILERT_WEBHOOK_URL }}


concurrency: ${{ inputs.environment }}

jobs:
  apply-tofu-and-run-migration:
#    runs-on: self-hosted
    runs-on: ubuntu-22.04
    environment: ${{ inputs.environment }}

    steps:
#      - name: Cache OpenTofu
#        uses: actions/cache@v4
#        with:
#          path: ~/.local/share/tofu
#          key: ${{ runner.os }}-tofu-${{ hashFiles('**/versions.tf', '**/.terraform.lock.hcl') }}
#          restore-keys: |
#            ${{ runner.os }}-tofu-

      - uses: opentofu/setup-opentofu@v1

      - name: Git clone the repository
        uses: actions/checkout@v4
#        with:`
#          lfs: true
#
#      - name: Checkout LFS objects
#        run: git lfs checkout

      - name: Copy environment files
        run: |
          cp pyproject.toml agent/pyproject.toml
          cp uv.lock agent/uv.lock

      - name: Set version hash
        id: version
        run: |
          echo "HASH_AGENT=$(find agent -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum | rev | cut -c4- | rev)" >> $GITHUB_OUTPUT

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_DEPLOYMENT_ROLE_ARN }}
          role-session-name: OpensearchAgentDeploymentSession
          aws-region: ${{ env.AWS_DEPLOYMENT_REGION_NAME }}

      - name: Cache Terraform providers
        uses: actions/cache@v4
        with:
          path: infra/.terraform
          key: ${{ runner.os }}-deploy-agent-terraform-${{ hashFiles('infra/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-deploy-agent-terraform-

      - name: Tofu init
        run: tofu init -backend-config="bucket=${{ env.AWS_S3_TOFU_BUCKET_NAME }}" -backend-config="region=${{ env.AWS_DEPLOYMENT_REGION_NAME }}"
        working-directory: ./infra/

      - name: Tofu plan
        run: tofu plan -var agent_image_version="${{ steps.version.outputs.HASH_AGENT }}"
        working-directory: ./infra/

      - name: Tofu apply
        run: tofu apply --auto-approve -var agent_image_version="${{ steps.version.outputs.HASH_AGENT }}"
        working-directory: ./infra/

      - name: Save tofu output
        id: tofu-output
        run: |
          echo "AGENT_RUNTIME_NAME=$(tofu output -raw agent_runtime_name)" >> $GITHUB_OUTPUT
          echo "AGENT_RUNTIME_ROLE_ARN=$(tofu output -raw agent_runtime_role_arn)" >> $GITHUB_OUTPUT
        working-directory: ./infra/

      - name: Cache Python installation
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ${{ env.pythonLocation }}
          key: ${{ runner.os }}-deploy-agent-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-deploy-agent-${{ env.PYTHON_VERSION }}-

      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '${{ env.PYTHON_VERSION }}'

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: '${{ env.UV_VERSION }}'
          enable-cache: true

      - name: Install dependencies
        run: uv sync

      - name: Update or create agent runtime
        run: |
          uv run python ./infra/scripts/agentcore_runtime_update_or_create.py \
            --agent-runtime-name "${{ steps.tofu-output.outputs.AGENT_RUNTIME_NAME }}" \
            --agent-runtime-image-uri "${{ env.AWS_ECR_AGENT_REPOSITORY_URI }}:${{ steps.version.outputs.HASH_AGENT }}" \
            --agent-runtime-role-arn "${{ steps.tofu-output.outputs.AGENT_RUNTIME_ROLE_ARN }}"
#
#      - name: Install poetry
#        run: |
#          pip install -U poetry
#        shell: bash
#        working-directory: ./migrations/athena/
#
#      - name: Setup a local virtual environment
#        run: |
#          poetry config virtualenvs.create true --local
#          poetry config virtualenvs.in-project true --local
#        working-directory: ./migrations/athena/
#
#      - name: Configure cache for python packages
#        uses: actions/cache@v3
#        with:
#          path: migrations/athena/.venv
#          key: ${{ runner.os }}-build-deploy-migration-${{ env.BRANCH_NAME }}-${{ hashFiles('migrations/athena/poetry.lock') }}
#          restore-keys: |
#            ${{ runner.os }}-build-deploy-migration-${{ env.BRANCH_NAME }}-
#
#      - name: Install the project dependencies
#        run: poetry install --without test
#        working-directory: ./migrations/athena/
#
#      - name: Run migrations on opensearch
#        if: ${{ inputs.environment == 'prod' }}
#        run: |
#          tofu init -backend-config="bucket=${{ vars.AWS_S3_TOFU_BUCKET_NAME }}" -backend-config="region=${{ vars.AWS_REGION_NAME }}"
#          tofu plan
#          tofu apply --auto-approve
#        working-directory: ./migrations/opensearch
#
#      - name: Run migrations on athena
#        if: ${{ inputs.environment == 'prod' }}
#        run: |
#          poetry run python main.py --regionName ${{ vars.AWS_REGION_NAME }} --accountId ${{ vars.AWS_ACCOUNT_ID }} --envName ${{ inputs.environment }}
#        working-directory: ./migrations/athena/src

#  trigger-sejmoskop-web-build:
#    runs-on: ubuntu-latest
#    needs: [ apply-tofu-and-run-migrations ]
#
#    steps:
#      - name: Trigger sejmoskop-web build
#        uses: convictional/trigger-workflow-and-wait@v1.6.1
#        with:
#          owner: torm89
#          repo: sejmoskop-web
#          github_token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
#          github_user: torm89
#          workflow_file_name: pipeline.yaml
#          ref: ${{ (github.head_ref || github.ref_name) == 'main' && 'main' || 'dev' }}
#          propagate_failure: true
#          trigger_workflow: true
#          wait_workflow: true
